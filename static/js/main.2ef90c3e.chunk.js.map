{"version":3,"sources":["App.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","componentDidMount","newNoteGuess","getRandomArrayItem","arr","Math","floor","random","length","animateCSS","element","animationName","speed","callback","node","classList","add","addEventListener","handleAnimationEnd","remove","removeEventListener","setState","hasWon","hasFailed","obj","notes","treble","note","representations","generatedNote","name","value","keyClickHandler","e","state","correct","currentTarget","children","innerHTML","displayTextEle","displayText","current","setTimeout","bass","React","createRef","text","this","textStyle","color","className","css","displayWrapper","display","style","ref","keyboard","map","val","i","onClick","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ef90c3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__ko9uR\",\"displayWrapper\":\"App_displayWrapper__1vpL1\",\"display\":\"App_display__3o1UA\",\"keyboard\":\"App_keyboard__14exR\"};","import React from \"react\";\r\nimport css from \"./App.module.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      generatedNote: null,\r\n      hasWon: false,\r\n      hasFailed: false\r\n    };\r\n\r\n    this.notes = {\r\n      treble: [\r\n        {\r\n          name: \"C\",\r\n          representations: [\"R\", \"Y\"]\r\n        },\r\n        {\r\n          name: \"D\",\r\n          representations: [\"S\", \"Z\"]\r\n        },\r\n        {\r\n          name: \"E\",\r\n          representations: [\"T\", \"[\"]\r\n        },\r\n        {\r\n          name: \"F\",\r\n          representations: [\"U\", \"\\\\\"]\r\n        },\r\n        {\r\n          name: \"G\",\r\n          representations: [\"V\", \"]\"]\r\n        },\r\n        {\r\n          name: \"A\",\r\n          representations: [\"W\", \"^\"]\r\n        },\r\n        {\r\n          name: \"H\",\r\n          representations: [\"X\", \"â€°\"]\r\n        }\r\n      ],\r\n      bass: []\r\n    };\r\n\r\n    this.displayText = React.createRef();\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.newNoteGuess();\r\n  };\r\n\r\n  getRandomArrayItem = arr => {\r\n    return arr[Math.floor(Math.random() * arr.length)];\r\n  };\r\n\r\n  // From https://github.com/daneden/animate.css (modified)\r\n  animateCSS = (element, animationName, speed, callback) => {\r\n    const node = element;\r\n    node.classList.add(\"animated\", animationName, speed);\r\n\r\n    function handleAnimationEnd() {\r\n      node.classList.remove(\"animated\", animationName, speed);\r\n      node.removeEventListener(\"animationend\", handleAnimationEnd);\r\n\r\n      if (typeof callback === \"function\") callback();\r\n    }\r\n\r\n    node.addEventListener(\"animationend\", handleAnimationEnd);\r\n  };\r\n\r\n  newNoteGuess = () => {\r\n    this.setState({\r\n      hasWon: false,\r\n      hasFailed: false\r\n    });\r\n\r\n    const obj = this.getRandomArrayItem(this.notes.treble);\r\n    const note = this.getRandomArrayItem(obj.representations);\r\n\r\n    this.setState({\r\n      generatedNote: {\r\n        name: obj.name,\r\n        value: note\r\n      }\r\n    });\r\n  };\r\n\r\n  keyClickHandler = e => {\r\n    if(this.state.hasWon) return\r\n\r\n    const keyName = e.currentTarget.children[0].innerHTML;\r\n    const correct = keyName === this.state.generatedNote.name ? true : false;\r\n    const displayTextEle = this.displayText.current;\r\n\r\n    if (!correct) {\r\n      this.setState({\r\n        hasFailed: true\r\n      });\r\n\r\n      this.animateCSS(displayTextEle, \"tada\", \"fast\")\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      hasWon: true\r\n    });\r\n\r\n    this.animateCSS(displayTextEle, \"bounceIn\", null)\r\n\r\n    setTimeout(() => {\r\n      this.newNoteGuess();\r\n    }, 2000);\r\n  };\r\n\r\n  render() {\r\n    const keys = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"H\"];\r\n    let text = this.state.hasWon ? \"Correct\" : \"Which note is this?\";\r\n    let textStyle = {\r\n      color: this.state.hasWon ? \"green\" : \"black\"\r\n    };\r\n\r\n    if (this.state.hasFailed && !this.state.hasWon) text = \"Try again\";\r\n\r\n    return (\r\n      <div className={css.App}>\r\n        <div className={css.displayWrapper}>\r\n          <h1 className={css.display}>\r\n            {this.state.generatedNote\r\n              ? `'&====${this.state.generatedNote.value}=====!`\r\n              : \"\"}\r\n          </h1>\r\n          <h2 style={textStyle} ref={this.displayText}>\r\n            {text}\r\n          </h2>\r\n        </div>\r\n\r\n        <div className={css.keyboard}>\r\n          {keys.map((val, i) => {\r\n            return (\r\n              <div onClick={this.keyClickHandler} key={i}>\r\n                <p>{val}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport \"./animate.css\"\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}