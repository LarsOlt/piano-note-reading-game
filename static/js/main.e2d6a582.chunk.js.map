{"version":3,"sources":["App.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","componentDidMount","newNoteGuess","getRandomArrayItem","arr","Math","floor","random","length","setState","hasWon","obj","notes","treble","note","representations","generatedNote","name","value","keyClickHandler","e","currentTarget","children","innerHTML","state","setTimeout","bass","text","this","className","css","displayWrapper","display","style","color","keyboard","map","val","i","onClick","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,eAAiB,4BAA4B,QAAU,qBAAqB,SAAW,wB,2JCkHjHC,E,YA/Gb,aAAe,IAAD,8BACZ,+CA0CFC,kBAAoB,WAClB,EAAKC,gBA5CO,EA+CdC,mBAAqB,SAACC,GACpB,OAAOA,EAAIC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,UAhD9B,EAmDdN,aAAc,WACZ,EAAKO,SAAS,CACZC,QAAQ,IAGV,IAAMC,EAAM,EAAKR,mBAAmB,EAAKS,MAAMC,QAEzCC,EAAO,EAAKX,mBAAmBQ,EAAII,iBAEzC,EAAKN,SAAS,CACZO,cAAe,CACbC,KAAMN,EAAIM,KACVC,MAAOJ,MA/DC,EAoEdK,gBAAiB,SAACC,GACAA,EAAEC,cAAcC,SAAS,GAAGC,YAChB,EAAKC,MAAMR,cAAcC,OAGnD,EAAKR,SAAS,CACZC,QAAQ,IAGVe,YAAW,WACT,EAAKvB,iBACJ,OA5EL,EAAKsB,MAAQ,CACXR,cAAe,KACfN,QAAQ,GAGV,EAAKE,MAAQ,CACXC,OAAQ,CACN,CACEI,KAAM,IACNF,gBAAiB,CAAC,IAAK,MAEzB,CACEE,KAAM,IACNF,gBAAiB,CAAC,IAAK,MAEzB,CACEE,KAAM,IACNF,gBAAiB,CAAC,IAAK,MAEzB,CACEE,KAAM,IACNF,gBAAiB,CAAC,IAAK,OAEzB,CACEE,KAAM,IACNF,gBAAiB,CAAC,IAAK,MAEzB,CACEE,KAAM,IACNF,gBAAiB,CAAC,IAAK,MAEzB,CACEE,KAAM,IACNF,gBAAiB,CAAC,IAAK,YAG3BW,KAAM,IAvCI,E,sEAmFJ,IAAD,OAEDC,EAAOC,KAAKJ,MAAMd,OAAQ,iBAAc,sBAK9C,OACE,yBAAKmB,UAAWC,IAAI9B,KAClB,yBAAK6B,UAAWC,IAAIC,gBAClB,wBAAIF,UAAWC,IAAIE,SAChBJ,KAAKJ,MAAMR,cAAX,gBAAmCY,KAAKJ,MAAMR,cAAcE,MAA5D,UAA4E,IAEjF,wBAAIe,MAAOL,KAAKJ,MAAMd,OAVV,CACdwB,MAAO,SASmC,MAAOP,IAG/C,yBAAKE,UAAWC,IAAIK,UAfX,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAiBzBC,KAAI,SAACC,EAAKC,GACf,OAAO,yBAAKC,QAAS,EAAKpB,gBAAiBqB,IAAKF,GAAG,2BAAID,a,GAvGjDI,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e2d6a582.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__Bq9Gs\",\"displayWrapper\":\"App_displayWrapper__E-JEB\",\"display\":\"App_display__zRxIP\",\"keyboard\":\"App_keyboard__STho-\"};","import React from \"react\";\nimport css from \"./App.module.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      generatedNote: null,\n      hasWon: false\n    }\n\n    this.notes = {\n      treble: [\n        {\n          name: \"C\",\n          representations: [\"R\", \"Y\"]\n        },\n        {\n          name: \"D\",\n          representations: [\"S\", \"Z\"]\n        },\n        {\n          name: \"E\",\n          representations: [\"T\", \"[\"]\n        },\n        {\n          name: \"F\",\n          representations: [\"U\", \"\\\\\"]\n        },\n        {\n          name: \"G\",\n          representations: [\"V\", \"]\"]\n        },\n        {\n          name: \"A\",\n          representations: [\"W\", \"^\"]\n        },\n        {\n          name: \"H\",\n          representations: [\"X\", \"‰\"]\n        }\n      ],\n      bass: []\n    };\n  }\n\n  componentDidMount = ()=>{\n    this.newNoteGuess()\n  }\n\n  getRandomArrayItem = (arr) =>{\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  newNoteGuess= () => {\n    this.setState({\n      hasWon: false\n    })\n\n    const obj = this.getRandomArrayItem(this.notes.treble);\n\n    const note = this.getRandomArrayItem(obj.representations);\n\n    this.setState({\n      generatedNote: {\n        name: obj.name,\n        value: note\n      }\n    })\n  }\n\n  keyClickHandler= (e)=>{\n    const keyName = e.currentTarget.children[0].innerHTML;\n    const correct = keyName === this.state.generatedNote.name ? true : false;\n\n    if(correct){\n      this.setState({\n        hasWon: true\n      })\n\n      setTimeout(()=>{\n        this.newNoteGuess()\n      }, 2000)\n    }\n  }\n\n  render() {\n    const keys = [\"C\",\"D\",\"E\",\"F\",\"G\",\"A\",\"H\"];\n    const text = this.state.hasWon? \"Correct ✔\" : \"Which note is this?\"\n    const winStyle= {\n      color: \"green\"\n    }\n\n    return (\n      <div className={css.App}>\n        <div className={css.displayWrapper}>\n          <h1 className={css.display}>\n            {this.state.generatedNote? `'&====${this.state.generatedNote.value}======` : \"\"}\n          </h1>\n        <h2 style={this.state.hasWon ? winStyle:null}>{text}</h2>\n        </div>\n\n        <div className={css.keyboard}>\n          {\n            keys.map((val, i)=>{\n            return <div onClick={this.keyClickHandler} key={i}><p>{val}</p></div>\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}